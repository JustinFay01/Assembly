Microsoft (R) Macro Assembler Version 14.35.32216.1	    04/05/23 23:48:14
example.asm						     Page 1 - 1


				; Fahrenheit to Celsius conversion
				; Mike Jipping
				; March 2017

				.586
				.MODEL FLAT

				INCLUDE io.h            ; header file for input/output
			      C ; IO.H -- header file for I/O macros (listing suppressed)
			      C .NOLIST      ; turn off listing
			      C .LIST        ; begin listing
			      C 

				.STACK 4096

				;--------------------------------------------------------------------------------------------
				; Declarations
				; Note that we declare a constant in a memory location (nine) for the idiv instruction

 00000000			.DATA
 00000000 00000000		fahren  DWORD   ?
 00000004 00000000		celsius DWORD   ?
 00000008 00000009		nine    DWORD   9
 0000000C 0000000A		ten     DWORD   10
 00000010 45 6E 74 65 72	prompt1 BYTE    "Enter the temperature in Farenheit", 0
	   20 74 68 65 20
	   74 65 6D 70 65
	   72 61 74 75 72
	   65 20 69 6E 20
	   46 61 72 65 6E
	   68 65 69 74 00
 00000033  00000028 [		temp    BYTE    40 DUP (?)
	    00
	   ]
 0000005B  0000000B [		celstr  BYTE    11 DUP (?), 0
	    00
	   ] 00
 00000067 49 74 27 73 20	freeze  BYTE    "It's Freezing!" ,0            ; if temp is       temp < 32
	   46 72 65 65 7A
	   69 6E 67 21 00
 00000076 49 74 27 73 20	cold    BYTE    "It's cold. Wear a coat!" ,0   ; if temp is 32 <= temp < 45
	   63 6F 6C 64 2E
	   20 57 65 61 72
	   20 61 20 63 6F
	   61 74 21 00
 0000008E 49 74 27 73 20	cool    BYTE    "It's cool out." ,0            ; if temp is 45 <= temp < 60
	   63 6F 6F 6C 20
	   6F 75 74 2E 00
 0000009D 54 68 69 73 20	warm    BYTE    "This is the best weather!" ,0 ; if temp is 60 <= temp < 75
	   69 73 20 74 68
	   65 20 62 65 73
	   74 20 77 65 61
	   74 68 65 72 21
	   00
 000000B7 49 74 27 73 20	hot     BYTE    "It's summertime!"  ,0         ; if temp is       75 <= temp
	   73 75 6D 6D 65
	   72 74 69 6D 65
	   21 00

				;--------------------------------------------------------------------------------------------
				; Here's the actual code.

 00000000			.CODE
 00000000			_MainProc PROC
				        ; Input the farenheit temperature to the EAX register
				        ; Both "input" and "atod" are macros
				        input   prompt1, temp, 40
				        atod    temp            ; convert the string starting in "temp" to integer in EAX
 0000002D  A3 00000000 R	        mov     fahren, eax
 00000032  83 F8 20		        cmp     EAX, 32
 00000035  7C 12		        JL      freezeLbl ; check if freezing
 00000037  83 F8 2D		        cmp     EAX, 45
 0000003A  7C 2C		        JL      coldLbl
 0000003C  83 F8 3C		        cmp     EAX, 60
 0000003F  7C 46		        JL      coolLbl
 00000041  83 F8 4B		        cmp     EAX, 75
 00000044  7C 60		        JL      warmLbl
 00000046  EB 7D		        jmp     hotLBL
 00000048  C3			        ret

				        
				        
 00000049			freezeLbl:  ; if temp is       temp < 32
				        output  freeze, freeze
 00000062  B8 00000000		        mov     eax, 0  ; exit with return code 0
 00000067  C3			        ret

 00000068			coldLbl:    ; if temp is 32 <= temp < 45
				        output  cold, cold
 00000081  B8 00000000		        mov     eax, 0  ; exit with return code 0
 00000086  C3			        ret
 00000087			coolLbl:    ; if temp is 45 <= temp < 60
				        output  cool, cool
 000000A0  B8 00000000		        mov     eax, 0  ; exit with return code 0
 000000A5  C3			        ret
 000000A6			warmLbl:    ; if temp is 60 <= temp < 75
				        output  warm, warm
 000000BF  B8 00000000		        mov     eax, 0  ; exit with return code 0
 000000C4  C3			        ret
 000000C5			hotLbl:     ; if temp is       75 <= temp
				        output  hot, hot
 000000DE  B8 00000000		        mov     eax, 0  ; exit with return code 0
 000000E3  C3			        ret

				       
 000000E4			_MainProc ENDP  
				END                             ; end of source code
Microsoft (R) Macro Assembler Version 14.35.32216.1	    04/05/23 23:48:14
example.asm						     Symbols 2 - 1




Macros:

                N a m e                 Type

atod . . . . . . . . . . . . . .	Proc
atow . . . . . . . . . . . . . .	Proc
dtoa . . . . . . . . . . . . . .	Proc
input  . . . . . . . . . . . . .	Proc
output . . . . . . . . . . . . .	Proc
wtoa . . . . . . . . . . . . . .	Proc


Segments and Groups:

                N a m e                 Size     Length   Align   Combine Class

FLAT . . . . . . . . . . . . . .	GROUP
STACK  . . . . . . . . . . . . .	32 Bit	 00001000 Para	  Stack	  'STACK'	 
_DATA  . . . . . . . . . . . . .	32 Bit	 000000C8 Para	  Public  'DATA'	
_TEXT  . . . . . . . . . . . . .	32 Bit	 000000E4 Para	  Public  'CODE'	


Procedures, parameters, and locals:

                N a m e                 Type     Value    Attr

_MainProc  . . . . . . . . . . .	P Near	 00000000 _TEXT	Length= 000000E4 Public
  freezeLbl  . . . . . . . . . .	L Near	 00000049 _TEXT	
  coldLbl  . . . . . . . . . . .	L Near	 00000068 _TEXT	
  coolLbl  . . . . . . . . . . .	L Near	 00000087 _TEXT	
  warmLbl  . . . . . . . . . . .	L Near	 000000A6 _TEXT	
  hotLbl . . . . . . . . . . . .	L Near	 000000C5 _TEXT	


Symbols:

                N a m e                 Type     Value    Attr

@CodeSize  . . . . . . . . . . .	Number	 00000000h   
@DataSize  . . . . . . . . . . .	Number	 00000000h   
@Interface . . . . . . . . . . .	Number	 00000000h   
@Model . . . . . . . . . . . . .	Number	 00000007h   
@code  . . . . . . . . . . . . .	Text   	 _TEXT
@data  . . . . . . . . . . . . .	Text   	 FLAT
@fardata?  . . . . . . . . . . .	Text   	 FLAT
@fardata . . . . . . . . . . . .	Text   	 FLAT
@stack . . . . . . . . . . . . .	Text   	 FLAT
_getInput  . . . . . . . . . . .	L Near	 00000000 FLAT	External
_showOutput  . . . . . . . . . .	L Near	 00000000 FLAT	External
atodproc . . . . . . . . . . . .	L Near	 00000000 FLAT	External
atowproc . . . . . . . . . . . .	L Near	 00000000 FLAT	External
celsius  . . . . . . . . . . . .	DWord	 00000004 _DATA	
celstr . . . . . . . . . . . . .	Byte	 0000005B _DATA	
cold . . . . . . . . . . . . . .	Byte	 00000076 _DATA	
cool . . . . . . . . . . . . . .	Byte	 0000008E _DATA	
dtoaproc . . . . . . . . . . . .	L Near	 00000000 FLAT	External
fahren . . . . . . . . . . . . .	DWord	 00000000 _DATA	
freeze . . . . . . . . . . . . .	Byte	 00000067 _DATA	
hot  . . . . . . . . . . . . . .	Byte	 000000B7 _DATA	
nine . . . . . . . . . . . . . .	DWord	 00000008 _DATA	
prompt1  . . . . . . . . . . . .	Byte	 00000010 _DATA	
temp . . . . . . . . . . . . . .	Byte	 00000033 _DATA	
ten  . . . . . . . . . . . . . .	DWord	 0000000C _DATA	
warm . . . . . . . . . . . . . .	Byte	 0000009D _DATA	
wtoaproc . . . . . . . . . . . .	L Near	 00000000 FLAT	External

	   0 Warnings
	   0 Errors
