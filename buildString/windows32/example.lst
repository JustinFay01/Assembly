Microsoft (R) Macro Assembler Version 14.35.32216.1	    04/09/23 23:54:21
example.asm						     Page 1 - 1


				; Example assembly language program -- adds two numbers
				; Author:  R. Detmer
				; Date:    1/2008

				.586
				.MODEL FLAT

				INCLUDE io.h            ; header file for input/output
			      C ; IO.H -- header file for I/O macros (listing suppressed)
			      C .NOLIST      ; turn off listing
			      C .LIST        ; begin listing
			      C 

				.STACK 4096

 00000000			.DATA

 00000000  00000020 [		strbuff BYTE   32 DUP (?)   ;Buffer for combined strings
	    00
	   ]

 00000020 00000000		inOne       DWORD    ? 
 00000024 00000000		inTwo       DWORD    ?
 00000028 00000000		inOneStr    DWORD    ?
 0000002C 00000000		inTwoStr    DWORD    ?
 00000030 20 69 73 20 6C	str1        BYTE     " is less than ", 0
	   65 73 73 20 74
	   68 61 6E 20 00
 0000003F 20 69 73 20 67	str2        BYTE     " is greater than ", 0
	   72 65 61 74 65
	   72 20 74 68 61
	   6E 20 00
 00000051 20 69 73 20 65	str3        BYTE     " is equal to ",0
	   71 75 61 6C 20
	   74 6F 20 00

 0000005F  00000028 [		temp        DWORD    40 DUP (?)
	    00000000
	   ]
 000000FF 45 6E 74 65 72	prompt1     BYTE    "Enter a number", 0         ; First prompt
	   20 61 20 6E 75
	   6D 62 65 72 00
 0000010E 45 6E 74 65 72	prompt2     BYTE    "Enter another number", 0   ; Second prompt
	   20 61 6E 6F 74
	   68 65 72 20 6E
	   75 6D 62 65 72
	   00

 00000000			.CODE
 00000000			_MainProc PROC
				        input   prompt1, temp, 40
 0000001E  A1 0000005F R	        mov     eax, temp
 00000023  A3 00000028 R	        mov     inOneStr, eax 
				        atod    temp 
 00000037  A3 00000020 R	        mov     inOne, eax

				        input   prompt2, temp, 40
 0000005A  A1 0000005F R	        mov     eax, temp
 0000005F  A3 0000002C R	        mov     inTwoStr, eax 
				        atod    temp 
 00000073  A3 00000024 R	        mov     inTwo, eax

 00000078  8D 15 00000000 R	        lea edx, strbuff ; get address for start of buffer

 0000007E  8D 1D 00000028 R	        lea ebx, inOneStr   ; Get address of first number
 00000084  8B 03		        mov eax, [ebx]  ; Store
 00000086  EB 68		        jmp whileLbl    ; jmp to label 

 00000088			cmpLbl:
 00000088  A1 00000020 R	       mov eax, inOne
 0000008D  3B 05 00000024 R	       cmp eax, inTwo
 00000093  7C 04		       jl       ltLbl
 00000095  7F 0C		       jg      gtLbl
 00000097  74 14		       je       eLbl

 00000099			ltLbl:
 00000099  8D 1D 00000030 R	        lea ebx, str1   ; Get address of string three
 0000009F  8B 03		        mov eax, [ebx]  ; Store
 000000A1  EB 4D		        jmp whileLbl    ; jmp to label 

 000000A3			gtLbl:
 000000A3  8D 1D 0000003F R	        lea ebx, str2   ; Get address of string three
 000000A9  8B 03		        mov eax, [ebx]  ; Store
 000000AB  EB 43		        jmp whileLbl    ; jmp to label 

 000000AD			eLbl:
 000000AD  8D 1D 00000051 R	        lea ebx, str3   ; Get address of string three
 000000B3  8B 03		        mov eax, [ebx]  ; Store
 000000B5  EB 39		        jmp whileLbl    ; jmp to label 


 000000B7			inTwoLbl:
 000000B7  8D 1D 0000002C R	        lea ebx, inTwoStr
 000000BD  8B 03		        mov eax, [ebx]
 000000BF  EB 2F		        jmp whileLbl
 000000C1			doneLbl:
				        output  strbuff, strbuff      ; output buff
 000000DA  B8 00000000		        mov     eax, 0  ; exit with return code 0
 000000DF  C3			        ret

 000000E0			whatjmpLbl:
 000000E0  66| 41		    inc cx          ; inc cx first time
 000000E2  66| 83 F9 01		    cmp cx, 1      
 000000E6  74 A0		    je  cmpLbl     ; if cx is one jmp to label 2 (second value of array of three strings)

 000000E8  66| 83 F9 02		    cmp cx, 2
 000000EC  74 C9		    je  inTwoLbl     ; else if cx is two jmp to label 3
 000000EE  EB D1		    jmp doneLbl     ; else output

 000000F0			whileLbl:  
 000000F0  3C 00		    cmp al, 0       ; If AL register != 0 j
 000000F2  74 EC		    je  whatjmpLbl  ; check which lbl we need to jmp to      
				                      
 000000F4  88 02		    mov [edx], al       ; store in buffer
 000000F6  42			    inc edx             ; inc where to write inside of the buffer
 000000F7  43			    inc ebx             ; increment address
 000000F8  8B 03		    mov eax, [ebx]      ; grab next charcter of string
 000000FA  EB F4		    jmp whileLbl
				    
 000000FC			_MainProc ENDP
				END                             ; end of source code

Microsoft (R) Macro Assembler Version 14.35.32216.1	    04/09/23 23:54:21
example.asm						     Symbols 2 - 1




Macros:

                N a m e                 Type

atod . . . . . . . . . . . . . .	Proc
atow . . . . . . . . . . . . . .	Proc
dtoa . . . . . . . . . . . . . .	Proc
input  . . . . . . . . . . . . .	Proc
output . . . . . . . . . . . . .	Proc
wtoa . . . . . . . . . . . . . .	Proc


Segments and Groups:

                N a m e                 Size     Length   Align   Combine Class

FLAT . . . . . . . . . . . . . .	GROUP
STACK  . . . . . . . . . . . . .	32 Bit	 00001000 Para	  Stack	  'STACK'	 
_DATA  . . . . . . . . . . . . .	32 Bit	 00000123 Para	  Public  'DATA'	
_TEXT  . . . . . . . . . . . . .	32 Bit	 000000FC Para	  Public  'CODE'	


Procedures, parameters, and locals:

                N a m e                 Type     Value    Attr

_MainProc  . . . . . . . . . . .	P Near	 00000000 _TEXT	Length= 000000FC Public
  cmpLbl . . . . . . . . . . . .	L Near	 00000088 _TEXT	
  ltLbl  . . . . . . . . . . . .	L Near	 00000099 _TEXT	
  gtLbl  . . . . . . . . . . . .	L Near	 000000A3 _TEXT	
  eLbl . . . . . . . . . . . . .	L Near	 000000AD _TEXT	
  inTwoLbl . . . . . . . . . . .	L Near	 000000B7 _TEXT	
  doneLbl  . . . . . . . . . . .	L Near	 000000C1 _TEXT	
  whatjmpLbl . . . . . . . . . .	L Near	 000000E0 _TEXT	
  whileLbl . . . . . . . . . . .	L Near	 000000F0 _TEXT	


Symbols:

                N a m e                 Type     Value    Attr

@CodeSize  . . . . . . . . . . .	Number	 00000000h   
@DataSize  . . . . . . . . . . .	Number	 00000000h   
@Interface . . . . . . . . . . .	Number	 00000000h   
@Model . . . . . . . . . . . . .	Number	 00000007h   
@code  . . . . . . . . . . . . .	Text   	 _TEXT
@data  . . . . . . . . . . . . .	Text   	 FLAT
@fardata?  . . . . . . . . . . .	Text   	 FLAT
@fardata . . . . . . . . . . . .	Text   	 FLAT
@stack . . . . . . . . . . . . .	Text   	 FLAT
_getInput  . . . . . . . . . . .	L Near	 00000000 FLAT	External
_showOutput  . . . . . . . . . .	L Near	 00000000 FLAT	External
atodproc . . . . . . . . . . . .	L Near	 00000000 FLAT	External
atowproc . . . . . . . . . . . .	L Near	 00000000 FLAT	External
dtoaproc . . . . . . . . . . . .	L Near	 00000000 FLAT	External
inOneStr . . . . . . . . . . . .	DWord	 00000028 _DATA	
inOne  . . . . . . . . . . . . .	DWord	 00000020 _DATA	
inTwoStr . . . . . . . . . . . .	DWord	 0000002C _DATA	
inTwo  . . . . . . . . . . . . .	DWord	 00000024 _DATA	
prompt1  . . . . . . . . . . . .	Byte	 000000FF _DATA	
prompt2  . . . . . . . . . . . .	Byte	 0000010E _DATA	
str1 . . . . . . . . . . . . . .	Byte	 00000030 _DATA	
str2 . . . . . . . . . . . . . .	Byte	 0000003F _DATA	
str3 . . . . . . . . . . . . . .	Byte	 00000051 _DATA	
strbuff  . . . . . . . . . . . .	Byte	 00000000 _DATA	
temp . . . . . . . . . . . . . .	DWord	 0000005F _DATA	
wtoaproc . . . . . . . . . . . .	L Near	 00000000 FLAT	External

	   0 Warnings
	   0 Errors
